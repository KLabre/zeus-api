using System.Collections.ObjectModel;
using AutoFixture;
using AutoFixture.AutoNSubstitute;
using AutoFixture.Idioms;
using Zeus.Api.Controllers;

namespace Zeus.Api.UnitTests.GuardTests
{
    public class ConstructorTests : GuardTestBase
    {
        [Fact]
        public void AllConstructors_OnDefault_MustGuardAgainstNullParameters()
        {
            // ARRANGE
            var fixture = new Fixture();

            // To control how AutoFixture handle collection or immutable types,
            // we can customize AutoFixture to ignore or mock these types in a more controlled manner
            fixture.Customize<ReadOnlyCollection<string>>(c => c.FromFactory(() => new ReadOnlyCollection<string>(new List<string> { "Default", "Values" })));

            fixture.Customize(new AutoNSubstituteCustomization());

            var assertion = new GuardClauseAssertion(fixture);

            var candidateAssemblies = new[]
            {
                typeof(RootController).Assembly,
            };

            // ASSERT
            foreach (var assembly in candidateAssemblies)
            {
                assembly.GetTypes()
                    .Where(type => type.IsClass && !type.GetConstructors()
                        .Any(c => c.GetParameters()
                            .Any(p => p.ParameterType.IsArray || p.ParameterType == typeof(ReadOnlyCollection<>)))) // Generic readonly types generated by the compiler
                    .Except(ClassesWhoseParametersAreNotMockable)
                    .Except(ClassesWhoseContructorsContainNullableParameters)
                    .Except(ClassesWhoeConstructorsDirectlyInvokedTheBaseConstructor)
                    .Where(ClassIsNotAController)
                    .ToList()
                    .ForEach(type =>
                    {
                        assertion.Verify(type?.GetConstructors());
                    });
            }
        }
    }
}
